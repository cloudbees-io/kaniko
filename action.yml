apiVersion: automation.cloudbees.io/v1alpha1
kind: action
name: 'Kaniko build and push'
description: 'Build and publish Docker images from a Dockerfile using Kaniko. Optionally, save the image as a tar file.'

inputs:
  dockerfile:
    description: 'Path to the Dockerfile'
    default: Dockerfile
  context:
    description: 'Docker build context'
    default: ${{ cloudbees.workspace }}
  destination:
    description: >
      Target image(s) that will be published to the registries configured in the file ${HOME}/.docker/config.json
      Type: CSV
    required: true
  tar-file:
    description: 'Path to save the image as a tar file.'
    required: false
  build-args:
    description: >
      Docker build arguments.
      Type: CSV
  labels:
    description: >
      Metadata to be associated with the resulting image.
      Type: CSV
  target:
    description: >
      Build a specific target stage in a multi-stage Dockerfile.
      Type: string
  registry-mirrors:
    description: >
      Registry mirror(s) to use for loading images.
      Type: CSV
  registry-configuration:
    description: >
      CloudBees registry configuration file containing the registries to use for loading images.
      By default it uses the file containing the registries configured under 'Integrations' in the CloudBees platform.
    default: ${{ cloudbees.registries }}
  skip-default-registry-fallback:
    default: 'false'
    description: >
      If set, fails build if registry-mirrors cannot pull image. If registry-mirrors is empty, this flag is ignored.
      Type: Boolean
  verbosity:
    default: info
    description: >
      Log level verbosity - panic, fatal, error, warn, info, debug, trace

outputs:
  digest:
    value: ${{ steps.imgbuild.outputs.digest }}
    description: Image digest (image ID)
  tag:
    value: ${{ steps.imgbuild.outputs.tag }}
    description: Tag of the first pushed image
  tag-digest:
    value: ${{ steps.imgbuild.outputs.tag-digest }}
    description: |
      Tag of the first specified destination along with the image digest.
      Please note that this format is not part of the OCI standard but supported by most container tools.
      Tools loading such an image reference ignore the tag but perform the lookup based on the image repository and digest only.
      The tag only serves as a hint for humans.
      Using this format guarantees that the image is continued to be used even when the tag was overwritten and prevents stale image caches on different nodes.
  image:
    value: ${{ steps.imgbuild.outputs.image }}
    description: |
      Image reference of the first specified destination, including the image digest.
      Please note that this image reference format is not part of the OCI standard but supported by most container tools.
      Tools loading such an image reference ignore the tag but perform the lookup based on the image repository and digest only.
      The tag only serves as a hint for humans.
      Using this image reference format guarantees that the image is continued to be used even when the tag was overwritten and prevents stale image caches on different nodes.

runs:
  using: composite
  steps:
    - id: imgbuild
      name: Build, publish, and optionally save Docker image as a tar archive.
      uses: docker://public.ecr.aws/l7o7z1g8/actions/kaniko-action:${{ action.scm.sha }}
      with:
        entrypoint: kaniko-action
        args: |
          --dockerfile "${{ inputs.dockerfile }}"
          --context "${{ inputs.context }}"
          --destination "${{ inputs.destination }}"
          --registry-mirrors "${{ inputs.registry-mirrors }}"
          --skip-default-registry-fallback="${{ inputs.skip-default-registry-fallback }}"
          --verbosity "${{ inputs.verbosity }}"
          --target "${{ inputs.target }}"
          ${{ inputs.tar-file && format('--tarPath {0}', inputs.tar-file) || '' }}
      env:
        DOCKER_CONFIG: ${{ cloudbees.home }}/.docker
        DOCKER_BUILD_ARGS: ${{ inputs.build-args }}
        DOCKER_LABELS: ${{ inputs.labels }}
        CLOUDBEES_REGISTRY_CONFIG: ${{ inputs.registry-configuration }}