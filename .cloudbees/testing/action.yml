apiVersion: automation.cloudbees.io/v1alpha1
kind: action
name: 'Kaniko build and push'
description: 'Build and publish Docker images from a Dockerfile using Kaniko'

inputs:
  dockerfile:
    description: 'Path to the Dockerfile'
    default: Dockerfile
  context:
    description: 'Docker build context'
    default: ${{ cloudbees.workspace }}
  destination:
    description: >
      Target image(s) that will be published to the registries configured in the file ${HOME}/.docker/config.json
      Type: CSV
    required: true
  build-args:
    description: >
      Docker build arguments.
      Type: CSV
  labels:
    description: >
      Metadata to be associated with the resulting image.
      Type: CSV
  registry-mirrors:
    description: >
      Registry mirror(s) to use for loading images.
      Type: CSV
  skip-default-registry-fallback:
    default: 'false'
    description: >
      If set, fails build if registry-mirrors cannot pull image. If registry-mirrors is empty, this flag is ignored.
      Type: Boolean

outputs:
  digest:
    value: ${{ steps.imgbuild.outputs.digest }}
    description: Image digest (image ID)
  tag:
    value: ${{ steps.imgbuild.outputs.tag }}
    description: Tag of the first pushed image
  tag-digest:
    value: ${{ steps.imgbuild.outputs.tag-digest }}
    description: |
      Tag of the first specified destination along with the image digest.
      Please note that this format is not part of the OCI standard but supported by most container tools.
      Tools loading such an image reference ignore the tag but perform the lookup based on the image repository and digest only.
      The tag only serves as a hint for humans.
      Using this format guarantees that the image is continued to be used even when the tag was overwritten and prevents stale image caches on different nodes.
  image:
    value: ${{ steps.imgbuild.outputs.image }}
    description: |
      Image reference of the first specified destination, including the image digest.
      Please note that this image reference format is not part of the OCI standard but supported by most container tools.
      Tools loading such an image reference ignore the tag but perform the lookup based on the image repository and digest only.
      The tag only serves as a hint for humans.
      Using this image reference format guarantees that the image is continued to be used even when the tag was overwritten and prevents stale image caches on different nodes.

runs:
  using: composite
  steps:
    - id: imgbuild
      name: Build and publish Docker image
      uses: docker://020229604682.dkr.ecr.us-east-1.amazonaws.com/actions/kaniko-action:${{ action.scm.sha }}
      with:
        entrypoint: kaniko-action
        args: --dockerfile "${{ inputs.dockerfile }}" --context "${{ inputs.context }}" --destination "${{ inputs.destination }}" --registry-mirrors "${{ inputs.registry-mirrors }}" --skip-default-registry-fallback="${{ inputs.skip-default-registry-fallback }}"
      env:
        DOCKER_CONFIG: ${{ cloudbees.home }}/.docker
        DOCKER_BUILD_ARGS: ${{ inputs.build-args }}
        DOCKER_LABELS: ${{ inputs.labels }}
